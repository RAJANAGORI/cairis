#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.

from cairis.core.ARM import *
from cairis.daemon.CairisHTTPError import ARMHTTPError, ObjectNotFoundHTTPError, MalformedJSONHTTPError, MissingParameterHTTPError, \
    OverwriteNotAllowedHTTPError
from cairis.core.ValueType import ValueType
from cairis.core.ValueTypeParameters import ValueTypeParameters
from cairis.core.Vulnerability import Vulnerability
from cairis.core.VulnerabilityEnvironmentProperties import VulnerabilityEnvironmentProperties
from cairis.core.VulnerabilityParameters import VulnerabilityParameters
from cairis.data.CairisDAO import CairisDAO
from cairis.tools.JsonConverter import json_serialize, json_deserialize
from cairis.tools.ModelDefinitions import VulnerabilityModel, VulnerabilityEnvironmentPropertiesModel
from cairis.tools.SessionValidator import check_required_keys

__author__ = 'Robin Quetin, Shamal Faily'


class VulnerabilityDAO(CairisDAO):
  def __init__(self, session_id):
    CairisDAO.__init__(self, session_id)

  def get_objects(self, constraint_id=-1):
    try:
      vulnerabilities = self.db_proxy.getVulnerabilities(constraint_id)
    except DatabaseProxyException as ex:
      self.close()
      raise ARMHTTPError(ex)

    vulKeys = sorted(vulnerabilities.keys())
    vulList = []
    for key in vulKeys:
      vulList.append(self.simplify(vulnerabilities[key]))
    return vulList

  def get_object_by_name(self, name, simplify=True):
    found_vulnerability = None
    try:
      vulnerabilities = self.db_proxy.getVulnerabilities()
    except DatabaseProxyException as ex:
      self.close()
      raise ARMHTTPError(ex)

    if vulnerabilities is not None:
      found_vulnerability = vulnerabilities.get(name)

    if found_vulnerability is None:
      self.close()
      raise ObjectNotFoundHTTPError('The provided vulnerability name')

    if simplify:
      found_vulnerability = self.simplify(found_vulnerability)

    return found_vulnerability
    
  def add_object(self, vulnerability):
    vuln_params = VulnerabilityParameters(
            vulName=vulnerability.theName,
            vulDesc=vulnerability.theDescription,
            vulType=vulnerability.theType,
            tags=vulnerability.theTags,
            cProperties=vulnerability.theEnvironmentProperties
    )

    try:
      if not self.check_existing_vulnerability(vulnerability.theName):
        new_id = self.db_proxy.addVulnerability(vuln_params)
        return new_id
      else:
        self.close()
        raise OverwriteNotAllowedHTTPError(obj_name=vulnerability.theName)
    except DatabaseProxyException as ex:
      self.close()
      raise ARMHTTPError(ex)
    except ARMException as ex:
      self.close()
      raise ARMHTTPError(ex)

  def update_object(self, vulnerability, name):

    vuln_params = VulnerabilityParameters(
      vulName=vulnerability.theName,
      vulDesc=vulnerability.theDescription,
      vulType=vulnerability.theType,
      tags=vulnerability.theTags,
      cProperties=vulnerability.theEnvironmentProperties
    )

    try:
      vulId = self.db_proxy.getDimensionId(name,'vulnerability')
      vuln_params.setId(vulId)
      self.db_proxy.updateVulnerability(vuln_params)
    except DatabaseProxyException as ex:
      self.close()
      raise ARMHTTPError(ex)
    except ARMException as ex:
      self.close()
      raise ARMHTTPError(ex)

  def delete_object(self, name):
    try:
      vulId = self.db_proxy.getDimensionId(name,'vulnerability')
      self.db_proxy.deleteVulnerability(vulId)
    except DatabaseProxyException as ex:
      self.close()
      raise ARMHTTPError(ex)
    except ARMException as ex:
      self.close()
      raise ARMHTTPError(ex)

  def check_existing_vulnerability(self, name):
    try:
      self.db_proxy.nameCheck(name, 'vulnerability')
      return False
    except ARMException as ex:
      if str(ex.value).find('already exists') > -1:
        return True
      self.close()
      raise ARMHTTPError(ex)

  # region Vulnerability Types
  def get_vulnerability_types(self, environment_name=''):
    try:
      vulnerability_types = self.db_proxy.getValueTypes('vulnerability_type', environment_name)
      return vulnerability_types
    except DatabaseProxyException as ex:
      self.close()
      raise ARMHTTPError(ex)
    except ARMException as ex:
      self.close()
      raise ARMHTTPError(ex)

  def get_vulnerability_type_by_name(self, name, environment_name=''):
    found_type = None
    vulnerability_types = self.get_vulnerability_types(environment_name=environment_name)

    if vulnerability_types is None or len(vulnerability_types) < 1:
      self.close()
      raise ObjectNotFoundHTTPError('Vulnerability types')

    idx = 0
    while found_type is None and idx < len(vulnerability_types):
      if vulnerability_types[idx].theName == name:
        found_type = vulnerability_types[idx]
      idx += 1

    if found_type is None:
      self.close()
      raise ObjectNotFoundHTTPError('The provided vulnerability type name')

    return found_type

  def add_vulnerability_type(self, vulnerability_type, environment_name=''):
    assert isinstance(vulnerability_type, ValueType)
    type_exists = self.check_existing_vulnerability_type(vulnerability_type.theName, environment_name=environment_name)

    if type_exists:
      self.close()
      raise OverwriteNotAllowedHTTPError(obj_name='The vulnerability type')

    params = ValueTypeParameters(
      vtName=vulnerability_type.theName,
      vtDesc=vulnerability_type.theDescription,
      vType='vulnerability_type',
      envName=environment_name,
      vtScore=vulnerability_type.theScore,
      vtRat=vulnerability_type.theRationale
    )

    try:
      return self.db_proxy.addValueType(params)
    except DatabaseProxyException as ex:
      self.close()
      raise ARMHTTPError(ex)
    except ARMException as ex:
      self.close()
      raise ARMHTTPError(ex)

  def update_vulnerability_type(self, vulnerability_type, name, environment_name=''):
    assert isinstance(vulnerability_type, ValueType)

    found_type = self.get_vulnerability_type_by_name(name, environment_name)

    params = ValueTypeParameters(
      vtName=vulnerability_type.theName,
      vtDesc=vulnerability_type.theDescription,
      vType='vulnerability_type',
      envName=environment_name,
      vtScore=vulnerability_type.theScore,
      vtRat=vulnerability_type.theRationale
    )
    params.setId(found_type.theId)

    try:
      self.db_proxy.updateValueType(params)
    except DatabaseProxyException as ex:
      self.close()
      raise ARMHTTPError(ex)
    except ARMException as ex:
      self.close()
      raise ARMHTTPError(ex)

  def delete_vulnerability_type(self, name, environment_name=''):
    found_type = self.get_vulnerability_type_by_name(name, environment_name)

    try:
      self.db_proxy.deleteAssetType(found_type.theId)
    except DatabaseProxyException as ex:
      self.close()
      raise ARMHTTPError(ex)
    except ARMException as ex:
      self.close()
      raise ARMHTTPError(ex)

  def check_existing_vulnerability_type(self, name, environment_name):
    try:
      self.get_vulnerability_type_by_name(name, environment_name)
      return True
    except ObjectNotFoundHTTPError:
      # Needs to reconnect after Error was raised
      self.db_proxy.reconnect(session_id=self.session_id)
      return False
  # endregion
    
  def from_json(self, request):
    json = request.get_json(silent=True)
    if json is False or json is None:
      self.close()
      raise MalformedJSONHTTPError(data=request.get_data())

    json_dict = json['object']
    check_required_keys(json_dict, VulnerabilityModel.required)
    json_dict['__python_obj__'] = Vulnerability.__module__+'.'+Vulnerability.__name__

    for idx in range(0, len(json_dict['theEnvironmentProperties'])):
      property = json_dict['theEnvironmentProperties'][idx]
      check_required_keys(property, VulnerabilityEnvironmentPropertiesModel.required)
      property['__python_obj__'] = VulnerabilityEnvironmentProperties.__module__+'.'+VulnerabilityEnvironmentProperties.__name__
      json_dict['theEnvironmentProperties'][idx] = property

    vulnerability = json_serialize(json_dict)
    vulnerability = json_deserialize(vulnerability)
    if not isinstance(vulnerability, Vulnerability):
      self.close()
      raise MalformedJSONHTTPError(data=request.get_data())
    else:
      return vulnerability

  def simplify(self, obj):
    assert isinstance(obj, Vulnerability)
    del obj.theVulnerabilityId
    del obj.theEnvironmentDictionary
    del obj.severityLookup
    return obj
